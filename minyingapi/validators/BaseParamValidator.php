<?php
/**
 *        File: BaseParamValidator.php
 *      Author: shangheguang
 *     Version: 1.0.0
 *  Createtime: 2017-11-09 11:50
 * Description:
 */

namespace minyingapi\validators;

use minyingapi\behaviors\AesChecker;
use minyingapi\behaviors\Md5Checker;
use yii\base\Model;

class BaseParamValidator extends Model
{
    public $appid;
    public $time;
    public $os;
    public $version;
    public $checkrules;
    public $checker;
    public $key;
    public $config = [];
    private $ip;
    private $requestTime;

    public function init()
    {
        $this->ip = \Yii::$app->request->getUserIP();
        $this->requestTime = $_SERVER["REQUEST_TIME_FLOAT"];
    }

    public function rules()
    {
        return [
            ['appid', 'required', 'message' => 'appid 参数 不能为空'],
            ['time', 'required', 'message' => 'time 参数 不能为空'],
            ['time', 'integer', 'message' => 'time 类型不正确'],
            ['os', 'required', 'message' => 'os 参数 不能为空'],
            ['version', 'required', 'message' => 'version 参数 不能为空'],
            ['appid', 'validateAppid'],
            ['checkrules', 'required', 'message' => '配置信息中没有配置验证规则'],  //校验加密规则
            ['checkrules', 'in', 'range' => ['AES-256-ECB',/* 'MD5'*/]],  //校验加密规则
            ['checkrules', 'validateCheckrules']
//            ['time', 'validateExpireTime'],
//            ['appid', 'validateIpWhiteList'],
//            ['appid', 'validateIpBlackList'],
//            ['appid', 'validateIpVisitInerval'],
        ];
    }

    public function afterValidate()
    {
        if (isset($this->checker->validateList) && is_array($this->checker->validateList)) {
            foreach ($this->checker->validateList as $value) {
                $return = call_user_func([$this->checker, $value]);
                if (is_array($return)) {
                    $this->addError($return[0], $return[1]);
                }
            }
        }

        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    public function validateCheckRules()
    {
        switch ($this->checkrules) {
            case "AES-256-ECB":
                $this->checker = new AesChecker(['encryptKey' => $this->key]);
                break;
            case "MD5":
                $this->checker = new Md5Checker(['encryptKey' => $this->key]);
                break;

        }
    }

//    public function validateExpireTime($attritude)
//    {
//        if (isset($this->config['requestexpiretime']) && !empty($this->config['requestexpiretime'])) {
//            //如果已经设置并且不为空
//            if ($this->requestTime - $this->$attritude > ($this->config['requestexpiretime'] / 1000)) {
//                $this->addError($attritude, '请求已过期');
//            }
//        }
//    }

//    public function validateIpWhiteList($attritude)
//    {
//        if (isset($this->config['ipwhitelist']) && !empty($ipWhiteList = $this->config['ipwhitelist'])) {
//            if (!in_array($this->ip, $ipWhiteList)) {
//                $this->addError($attritude, '此IP未被授权');
//            }
//        }
//    }
//
//    public function validateIpBlackList($attritude)
//    {
//        if (isset($this->config['ipblacklist']) && !empty($ipBalckList = $this->config['ipblacklist'])) {
//            if (in_array($this->ip, $ipBalckList)) {
//                $this->addError($attritude, '此IP已经被拉入黑名单中，禁止访问，如有疑问请联系客服');
//            }
//        }
//    }
//
//    public function validateIpVisitInerval($attritude)
//    {
//        if (isset($this->config['ipvisitinterval']) && !empty($ipVisitInterval = $this->config['ipvisitinterval'])) {
//            $lastVisitTime = ApiIpVisitCache::getIP($this->ip);
//            if (($this->requestTime - $lastVisitTime) < $ipVisitInterval / 1000) {
//                $this->addError($attritude, '访问过于频繁,请稍后再试');
//            }
//        }
//    }

    public function validateAppid($attritude)
    {
        $configs = \Yii::$app->params['appidcryptokey'];
        $config = [];
        foreach ($configs as $value) {
            if (isset($value['appid']) && $value['appid'] == $this->$attritude) {
                $config = $value;
                break;
            }
        }
        $this->config = $config;
        if (isset($config['appkey'])) {
            $this->key = $config['appkey'];
            $this->checkrules = $config['checkrules'];
        } else {
            $this->addError($attritude, 'appid错误');
        }
    }

}